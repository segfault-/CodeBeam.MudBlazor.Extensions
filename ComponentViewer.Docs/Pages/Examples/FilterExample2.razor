@using MudExtensions.Enums
@using MudBlazor
@using MudBlazor.Extensions
@using System.Linq.Expressions;


<MudFilter T="FamilyDto" Class="py-2 my-4" FilterRoot="@Filter" @bind-Expression="_expression" @bind-Expression:after="ExpressionChangedAsync">
    <FilterTemplate>
        <Property T="FamilyDto" Title="Mothers Name" PropertyExpression="@(x => x.Mom.Name)" />
        <Property T="FamilyDto" Title="Fathers Name" PropertyExpression="@(x => x.Dad.Name)" />
    </FilterTemplate>
    <LogicalOperatorTemplate>
        <MudTextM3 Class="mud-logical-operator">foo</MudTextM3>
    </LogicalOperatorTemplate>
</MudFilter>
<MudDataGrid T="FamilyDto" Class="py-2" Items="@__family" Filterable="false" Hover="true" Dense="true">
    <Columns>
        <PropertyColumn Property="@(x => x.Mom)">
            <CellTemplate Context="item">
                <MudStack>
                    <MudTextM3>@item.Item.Mom.Name</MudTextM3>
                    <MudTextM3>@item.Item.Mom.BirthDate</MudTextM3>
                </MudStack>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="@(x => x.Dad)">
            <CellTemplate Context="item">
                <MudStack>
                    <MudTextM3>@item.Item.Dad.Name</MudTextM3>
                    <MudTextM3>@item.Item.Dad.BirthDate</MudTextM3>
                </MudStack>
            </CellTemplate>
        </PropertyColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CatsDto" />
    </PagerContent>
</MudDataGrid>

@code {
    #nullable enable
    public class FamilyDto
    {
        public FamilyDto()
        :base()
        {
            Mom = new CatsDto();
            Dad = new CatsDto();
            Children = new List<CatsDto>();    
        }

        public CatsDto Mom { get; set; }
        public CatsDto Dad { get; set; }
        public IEnumerable<CatsDto> Children { get; set; }
    }


    public class CatsDto
    {
        public CatsDto()
        {
            Name = string.Empty;
            Gender = string.Empty;
            BirthDate = DateTime.MinValue;
            CatType = TabbyType.OrangeTabby;
            IsSpade = false;
            Temperature = 100.7;
            MicroId = Guid.Empty;
        }

        public string Name { get; set; }
        public string Gender { get; set; }
        public DateTime BirthDate { get; set; }
        public TabbyType CatType { get; set; }
        public bool IsSpade { get; set; }
        public double Temperature { get; set; }
        public Guid MicroId { get; set; }


        public enum TabbyType
        {
            OrangeTabby,
            GrayTabby,
            BlackTabby
        }
    }

    IEnumerable<FamilyDto> __family;
    IEnumerable<FamilyDto> _family;
    Expression<Func<FamilyDto, bool>>? _expression;


    public CompoundPredicate<FamilyDto> Filter { get; set; } = new CompoundPredicate<FamilyDto>()
        {
            LogicalOperator = CompoundPredicateLogicalOperator.And
        };



    protected Task ExpressionChangedAsync()
    {
        if (_expression is not null)
        {
            __family = _family.AsQueryable<FamilyDto>().Where(_expression);
        }
        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        var random = new Random();
        var names = new[] { "Fluffy", "Mittens", "Whiskers", "Shadow", "Ginger", "Smokey", "Tiger", "Simba", "Bella", "Oliver" };
        var genders = new[] { "Male", "Female" };
        var types = Enum.GetValues(typeof(CatsDto.TabbyType)).Cast<CatsDto.TabbyType>().ToArray();

        __family = _family = Enumerable.Range(1, 100).Select(i => new FamilyDto
            {
                Mom = new CatsDto
                {
                    Name = names[random.Next(names.Length)],
                    Gender = "Female",
                    BirthDate = DateTime.Now.AddYears(-random.Next(20, 50)).AddMonths(-random.Next(0, 12)).AddDays(-random.Next(0, 30)),
                    CatType = types[random.Next(types.Length)],
                    IsSpade = random.NextDouble() > 0.5,
                    Temperature = 36 + random.NextDouble() * 2, // Temperature between 36.0 and 38.0
                    MicroId = Guid.NewGuid(),
                },
                Dad = new CatsDto
                {
                    Name = names[random.Next(names.Length)],
                    Gender = "Male",
                    BirthDate = DateTime.Now.AddYears(-random.Next(20, 50)).AddMonths(-random.Next(0, 12)).AddDays(-random.Next(0, 30)),
                    CatType = types[random.Next(types.Length)],
                    IsSpade = random.NextDouble() > 0.5,
                    Temperature = 36 + random.NextDouble() * 2, // Temperature between 36.0 and 38.0
                    MicroId = Guid.NewGuid(),
                },
                Children = Enumerable.Range(1, random.Next(1, 5)).Select(j => new CatsDto
                {
                    Name = names[random.Next(names.Length)],
                    Gender = genders[random.Next(genders.Length)],
                    BirthDate = DateTime.Now.AddYears(-random.Next(1, 15)).AddMonths(-random.Next(0, 12)).AddDays(-random.Next(0, 30)),
                    CatType = types[random.Next(types.Length)],
                    IsSpade = random.NextDouble() > 0.5,
                    Temperature = 36 + random.NextDouble() * 2, // Temperature between 36.0 and 38.0
                    MicroId = Guid.NewGuid(),
                }).ToList()
            }).ToList();

        base.OnInitialized();
    }

}
