@using MudExtensions.Enums
@using MudBlazor
@using MudBlazor.Extensions
@using System.Linq.Expressions;
@using System.Text.Json;

<MudToolBar>
    <MudIconButton Icon="@Icons.Material.Outlined.Print" Color="Color.Inherit" Class="mr-5" OnClick="PrintFilter" />
    <MudIconButton Icon="@Icons.Material.Outlined.SwapCalls" Color="Color.Inherit" Class="mr-5" OnClick="SwapFilterRoot" />
</MudToolBar>

<MudFilter T="CatsDto" Class="py-2 my-4" FilterRoot="@CurrentFilter" @bind-Expression="_expression" @bind-Expression:after="ExpressionChangedAsync" >
    <FilterTemplate>
        <Property T="CatsDto" PropertyExpression="@(x => x.Name)" />
        <Property T="CatsDto" PropertyExpression="@(x => x.Gender)" />
        <Property T="CatsDto" PropertyExpression="@(x => x.BirthDate)" Title="Birthday" />
        <Property T="CatsDto" PropertyExpression="@(x => x.CatType)" Title="Type" />
        <Property T="CatsDto" PropertyExpression="@(x => x.IsSpade)" Title="Spade" />
        <Property T="CatsDto" PropertyExpression="@(x => x.Temperature)" />
        <Property T="CatsDto" PropertyExpression="@(x => x.MicroId)" Title="Air Tag" />
    </FilterTemplate>
</MudFilter>
<MudDataGrid T="CatsDto" Class="py-2" Items="@__cats" Filterable="false" Hover="true" Dense="true">
    <Columns>
        <PropertyColumn Property="@(x => x.Name)" />
        <PropertyColumn Property="@(x => x.Gender)" />
        <PropertyColumn Property="@(x => x.BirthDate)" Title="Birthday" />
        <PropertyColumn Property="@(x => x.CatType)" Title="Type" />
        <PropertyColumn Property="@(x => x.IsSpade)" Title="Spade" />
        <PropertyColumn Property="@(x => x.MicroId)" Title="Air Tag" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CatsDto" />
    </PagerContent>
</MudDataGrid>

<MudPaper>
    <pre>
        @JsonString
    </pre>
</MudPaper>


@code {
    #nullable enable
    public class CatsDto
    {
        public CatsDto()
        {

        }

        public string Name { get; set; }
        public string Gender { get; set; }
        public DateTime BirthDate { get; set; }
        public TabbyType CatType { get; set; }
        public bool IsSpade { get; set; }
        public double Temperature { get; set; }
        public Guid MicroId { get; set; }


        public enum TabbyType
        {
            OrangeTabby,
            GrayTabby,
            BlackTabby
        }
    }

    IEnumerable<CatsDto> __cats;
    IEnumerable<CatsDto> _cats;
    Expression<Func<CatsDto, bool>>? _expression;
    protected string JsonString;

    public CompoundPredicate<CatsDto> CurrentFilter { get; set; } = new CompoundPredicate<CatsDto>()
        {
            LogicalOperator = CompoundPredicateLogicalOperator.And
        };

    public CompoundPredicate<CatsDto> Filter { get; set; } = new CompoundPredicate<CatsDto>()
    {
        LogicalOperator = CompoundPredicateLogicalOperator.And
    };

    public CompoundPredicate<CatsDto> AltFilter { get; set; } = new CompoundPredicate<CatsDto>()
    {
        LogicalOperator = CompoundPredicateLogicalOperator.Or
    };



    protected void PrintFilter()
    {
        JsonSerializerOptions jsonSerializerOptions = new()
        {
            TypeInfoResolver = new PredicateUnitJsonTypeInfoResolver<CatsDto>(),
            WriteIndented = true
        };

        jsonSerializerOptions.Converters.Add(new AtomicPredicateConverter<CatsDto>());

        if (Filter is not null)
        {
            JsonString = JsonSerializer.Serialize<PredicateUnit<CatsDto>>(Filter, jsonSerializerOptions);

            if (JsonString is not null)
            {
                PredicateUnit<CatsDto>? pUnit = JsonSerializer.Deserialize<PredicateUnit<CatsDto>>(JsonString, jsonSerializerOptions);
            }
        }

    }

    protected void SwapFilterRoot()
    {
        if(CurrentFilter == Filter)
        {
            CurrentFilter = AltFilter;
        }
        else
        {
            CurrentFilter = Filter;
        }

    }

    protected Task ExpressionChangedAsync()
    {
        if (_expression is not null)
        {
            __cats = _cats.AsQueryable<CatsDto>().Where(_expression);
        }
        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        var random = new Random();
        var names = new[] { "Fluffy", "Mittens", "Whiskers", "Shadow", "Ginger", "Smokey", "Tiger", "Simba", "Bella", "Oliver" };
        var genders = new[] { "Male", "Female" };
        var types = Enum.GetValues(typeof(CatsDto.TabbyType)).Cast<CatsDto.TabbyType>().ToArray();

        __cats = _cats = Enumerable.Range(1, 100).Select(i => new CatsDto
            {
                Name = names[random.Next(names.Length)],
                Gender = genders[random.Next(genders.Length)],
                BirthDate = DateTime.Now.AddYears(-random.Next(1, 15)).AddMonths(-random.Next(0, 12)).AddDays(-random.Next(0, 30)),
                CatType = types[random.Next(types.Length)],
                IsSpade = random.NextDouble() > 0.5,
                Temperature = 36 + random.NextDouble() * 2, // Temperature between 36.0 and 38.0
                MicroId = Guid.NewGuid(),
            }).ToList();


        var catGenderAtomicPredicate = new AtomicPredicate<CatsDto>()
            {
                Parent = Filter,
                Value = "Male",
                Operator = MudExtensions.FilterOperator.String.Equal,
                Member = nameof(CatsDto.Gender)
            };

        var catBirthdateAtomicPredicate = new AtomicPredicate<CatsDto>()
            {
                Parent = Filter,
                Value = new DateTime(2014, 1, 1, 14, 30, 45),
                Operator = MudExtensions.FilterOperator.DateTime.OnOrAfter,
                Member = nameof(CatsDto.BirthDate)
            };

        var catTypeAtomicPredicate = new AtomicPredicate<CatsDto>()
            {
                Parent = Filter,
                Value = "BlackTabby,OrangeTabby",
                Operator = MudExtensions.FilterOperator.Enum.IsOneOf,
                Member = nameof(CatsDto.CatType)
            };


        Filter.AtomicPredicates.Add(catGenderAtomicPredicate);
        Filter.AtomicPredicates.Add(catBirthdateAtomicPredicate);
        Filter.AtomicPredicates.Add(catTypeAtomicPredicate);



        var altCatGenderAtomicPredicate = new AtomicPredicate<CatsDto>()
            {
                Parent = Filter,
                Value = "Female",
                Operator = MudExtensions.FilterOperator.String.Equal,
                Member = nameof(CatsDto.Gender)
            };

        var altCatBirthdateAtomicPredicate = new AtomicPredicate<CatsDto>()
            {
                Parent = Filter,
                Value = new DateTime(2014, 1, 1, 14, 30, 45),
                Operator = MudExtensions.FilterOperator.DateTime.OnOrBefore,
                Member = nameof(CatsDto.BirthDate)
            };

        AltFilter.AtomicPredicates.Add(altCatBirthdateAtomicPredicate);
        AltFilter.AtomicPredicates.Add(altCatGenderAtomicPredicate);


        CurrentFilter = Filter;

        base.OnInitialized();
    }
}
