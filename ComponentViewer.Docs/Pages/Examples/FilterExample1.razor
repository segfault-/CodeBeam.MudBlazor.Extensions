@using MudBlazor
@using MudBlazor.Utilities;

<MudFilter T="CatsDto">
    <FilterTemplate>
        <Property T="CatsDto" Title="Name"          PropertyExpression="@(x => x.Name)"         />
        <Property T="CatsDto" Title="Gender"        PropertyExpression="@(x => x.Gender)"       />
        <Property T="CatsDto" Title="Birthday"      PropertyExpression="@(x => x.BirthDate)"    />
        <Property T="CatsDto" Title="Type"          PropertyExpression="@(x => x.CatType)"      />
        <Property T="CatsDto" Title="Spade"         PropertyExpression="@(x => x.IsSpade)"      />
        <Property T="CatsDto" Title="Temperature"   PropertyExpression="@(x => x.Temperature)"  />
        <Property T="CatsDto" Title="Air Tag"       PropertyExpression="@(x => x.MicroId)"      />
    </FilterTemplate>
</MudFilter>
<MudDataGrid T="CatsDto" Items="@_cats" Filterable="false">
    <PropertyColumn Property="@(x => x.Name)"           Title="Nr (fixed)" DragAndDropEnabled="false" />
    <PropertyColumn Property="@(x => x.Gender)"         />
    <PropertyColumn Property="@(x => x.BirthDate)"      Title="Name (fixed)" DragAndDropEnabled="false" />
    <PropertyColumn Property="@(x => x.CatType)"        />
    <PropertyColumn Property="@(x => x.IsSpade)"        Title="Molar mass" />
    <PropertyColumn Property="@(x => x.MicroId)"        Title="Category" />
</MudDataGrid>

@code {
    public class CatsDto
    {
        public string Name { get; set; }
        public string Gender { get; set; }
        public DateTime BirthDate { get; set; }
        public TabbyType CatType { get; set; }
        public bool IsSpade { get; set; }
        public double Temperature { get; set; }
        public Guid MicroId { get; set; }

        public enum TabbyType
        {
            OrangeTabby,
            GrayTabby,
            BlackTabby
        }
    }

    IEnumerable<CatsDto> _cats;

    protected override void OnInitialized()
    {
        var random = new Random();
        var names = new[] { "Fluffy", "Mittens", "Whiskers", "Shadow", "Ginger", "Smokey", "Tiger", "Simba", "Bella", "Oliver" };
        var genders = new[] { "Male", "Female" };
        var types = Enum.GetValues(typeof(CatsDto.TabbyType)).Cast<CatsDto.TabbyType>().ToArray();

        _cats = Enumerable.Range(1, 100).Select(i => new CatsDto
            {
                Name = names[random.Next(names.Length)],
                Gender = genders[random.Next(genders.Length)],
                BirthDate = DateTime.Now.AddYears(-random.Next(1, 15)).AddMonths(-random.Next(0, 12)).AddDays(-random.Next(0, 30)),
                CatType = types[random.Next(types.Length)],
                IsSpade = random.NextDouble() > 0.5,
                Temperature = 36 + random.NextDouble() * 2, // Temperature between 36.0 and 38.0
                MicroId = Guid.NewGuid(),
            }).ToList();

        base.OnInitialized();
    }
}
