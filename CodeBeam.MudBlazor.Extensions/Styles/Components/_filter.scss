
@mixin hover-effects {
    align-self: center;
    border-color: var(--mud-m3-primary);
    color: var(--mud-m3-primary);
    margin-left: auto;
    margin-right: 8px;

    &:hover {
        border-color: var(--mud-m3-primary);
        color: var(--mud-m3-primary);
        transition: border-color .3s, color .3s;
    }
}

@mixin stack {
    margin-top: 2px;
}

.mud-compound-predicate, .mud-atomic-predicate {
    &:hover {
        .mud-cp-add-atomic, .mud-cp-add-compound, .mud-cp-remove, .mud-ap-remove {
            @include hover-effects;
            border-color: var(--mud-m3-primary);
            color: var(--mud-m3-primary);
            transition: border-color .3s, color .3s;
        }
    }
}

.mud-filter, .mud-data-grid {
    background-color: var(--mud-m3-surface);
    color: var(--mud-m3-on-surface);
}

@for $i from 0 through 10 {
    .compound-predicate-component.depth-#{$i} {
        padding-left: #{1em * $i};
    }
}

.mud-filter {
    padding-bottom: 128px;

    .mud-compound-predicate {
        @include stack;

        .mud-first-logical-operator, .mud-logical-operator {
            padding-top: 21px;
        }

        .mud-logical-operator {
            width: 50px;
        }

        .mud-cp-stack {
            .mud-cp-add-atomic, .mud-cp-add-compound, .mud-cp-remove {
                @include hover-effects;
            }
        }
    }

    .mud-atomic-predicate {
        @include stack;

        .mud-ap-stack {
            justify-content: space-between;

            .mud-filter-def {
                flex-grow: 1;
            }

            .mud-logical-operator {
                width: 50px;
            }

            .mud-property-select, .mud-operator-select, .mud-value-field {
                flex: 1 1 33.33%
            }

            .mud-ap-remove {
                @include hover-effects;
            }
        }
    }
}

