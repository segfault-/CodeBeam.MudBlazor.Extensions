@namespace MudExtensions
@inherits MudComponentBase
@typeparam T


<div class="@ClassName" style="@StyleString">
    <MudStack Class="mud-cp-stack" Row="true">

        @for(int i = 0; i <= Depth; i++)
        {
            int j = i;
            if(j == Depth - 1)
            {
                <MudTextM3 Class="mud-logical-operator">@ParentLogicalOperator</MudTextM3>
            }
            else
            {
                <MudTextM3 Class="mud-logical-operator" />
            }          
        }
         
        <MudSelectExtended Class="mud-cp-radio-group" T="CompoundPredicateLogicalOperator" @bind-Value="CompoundPredicate.LogicalOperator" @bind-Value:after="OnLogicalOperatorChangedAsync" ValuePresenter="Enums.ValuePresenter.Chip" ChipSize="Size.Small" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense">
            <MudSelectItemExtended T="CompoundPredicateLogicalOperator" Value="CompoundPredicateLogicalOperator.And" Text="AND" />
            <MudSelectItemExtended T="CompoundPredicateLogicalOperator" Value="CompoundPredicateLogicalOperator.Or" Text="OR" />
        </MudSelectExtended>


        <MudIconButton Class="mud-cp-add-atomic" Icon="@Icons.Material.Filled.AddCircleOutline" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="AddAtomicPredicateAsync" />
        <MudIconButton Class="mud-cp-add-compound" Icon="@Icons.Material.Filled.LibraryAdd" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="AddCompoundPredicateAsync" />
        <MudIconButton Class="mud-cp-remove" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" OnClick="RemovePredicateUnitAsync" />
    </MudStack>

    @{
        bool isFirstElement = true;
    }
    @foreach (var predicate in CompoundPredicate.GetPredicatesInOrder())
    {
        if (predicate is AtomicPredicate<T> atomicPredicate)
        {
            <AtomicPredicateComponent @key="atomicPredicate" @bind-AtomicPredicate="atomicPredicate" Filter="@Filter" LogicalOperator="@CompoundPredicate.LogicalOperator" IsFirstElement="@isFirstElement" Parent="CompoundPredicate" Depth="Depth" AtomicPredicateComponentChanged="OnAtomicPredicateChangedAsync" RemoveAtomicPredicateComponent="OnRemoveAtomicPredicateComponentAsync" />
        }
        else if (predicate is CompoundPredicate<T> compoundPredicate)
        {
            <CompoundPredicateComponent @key="compoundPredicate" @bind-CompoundPredicate="compoundPredicate" Filter="@Filter" ParentLogicalOperator="@CompoundPredicate.LogicalOperator" IsFirstElement="@isFirstElement" Depth="(Depth + 1)" CompoundPredicateComponentChanged="OnLogicalOperatorChangedAsync"  />
        }
        isFirstElement = false;
    }
</div>
