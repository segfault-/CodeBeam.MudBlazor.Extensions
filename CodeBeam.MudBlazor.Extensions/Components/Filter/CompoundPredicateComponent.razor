@namespace MudExtensions
@inherits MudComponentBase
@typeparam T

<div class="@ClassName" style="@StyleString">
    <MudStack Class="mud-cp-stack" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <MudRadioGroup Class="mud-cp-radio-group" @bind-SelectedOption="CompoundPredicate.LogicalOperator" T="CompoundPredicateLogicalOperator">
            <MudRadio Option="CompoundPredicateLogicalOperator.And" Size="Size.Small" Color="Color.Primary" UnCheckedColor="Color.Default">And</MudRadio>
            <MudRadio Option="CompoundPredicateLogicalOperator.Or" Size="Size.Small" Color="Color.Secondary" UnCheckedColor="Color.Default">Or</MudRadio>
        </MudRadioGroup>
        <MudButton Class="mud-cp-add-atomic" Size="Size.Small" Variant="Variant.Filled" OnClick="AddAtomicPredicate">Add atomic predicate</MudButton>
        <MudButton Class="mud-cp-add-compound" Size="Size.Small" Variant="Variant.Filled" OnClick="AddCompoundPredicate">Add compound predicate</MudButton>
        <MudIconButton Class="mud-cp-remove" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="RemovePredicateUnit" />
    </MudStack>

    @{
        bool isFirstElement = true;
    }
    @foreach (var predicate in CompoundPredicate.GetPredicatesInOrder())
    {
        if (predicate is AtomicPredicate<T> atomicPredicate)
        {
            <AtomicPredicateComponent @key="atomicPredicate" @bind-AtomicPredicate="atomicPredicate" Filter="@Filter" LogicalOperator="@CompoundPredicate.LogicalOperator" IsFirstElement="@isFirstElement" />
        }
        else if (predicate is CompoundPredicate<T> compoundPredicate)
        {
            <CompoundPredicateComponent @key="compoundPredicate" @bind-CompoundPredicate="compoundPredicate" Filter="@Filter" />
        }
        isFirstElement = false;
    }
</div>