@namespace MudExtensions
@using MudBlazor.Utilities;
@using MudExtensions.Enums;
@using System.Linq.Expressions;
@inherits MudComponentBase
@typeparam T

<div class="@ClassName" style="@StyleString">
    @if (PredicateUnit is CompoundPredicate<T> compoundPredicate)
    {
        <MudPaper Class="compound-predicate">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                <MudRadioGroup @bind-SelectedOption="compoundPredicate.LogicalOperator" T="FilterCompositionLogicalOperator">
                    <MudRadio Option="FilterCompositionLogicalOperator.And" Color="Color.Primary" UnCheckedColor="Color.Default">And</MudRadio>
                    <MudRadio Option="FilterCompositionLogicalOperator.Or" Color="Color.Secondary" UnCheckedColor="Color.Default">Or</MudRadio>
                </MudRadioGroup>
                <MudButton Variant="Variant.Filled" OnClick="AddPropertyExpression">Add atomic predicate</MudButton>
                <MudButton Variant="Variant.Filled" OnClick="AddGroup">Add compound predicate</MudButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
            </MudStack>
        </MudPaper>

        @foreach (var filterDescriptor in compoundPredicate.FilterDescriptors)
        {
            <CascadingValue Value="@Filter" IsFixed="true">
                <Node T="T" PredicateUnit="@filterDescriptor" />
            </CascadingValue>
        }
    }
    else if (PredicateUnit is AtomicPredicate<T> atomicPredicate)
    {
        <MudPaper Class="ma-8 pa-4">
            <MudStack Row="true">
                <MudSelect T="Expression<Func<T, object>>" @bind-Value="atomicPredicate.PropertyExpression" FullWidth="true" Required="true" Dense="true">
                    @foreach (var property in Filter.Properties ?? Enumerable.Empty<Property<T>>())
                    {
                        <MudSelectItem T="Expression<Func<T, object>>" Value="@property.PropertyExpression">@property.Title</MudSelectItem>
                    }
                </MudSelect>

                @if (atomicPredicate.PropertyExpression is not null)
                {
                    <MudPaper Class="flex-initial" Width="25%" Elevation="0">
                        <MudSelect T="string" @bind-Value="atomicPredicate.Operator" FullWidth="true" Required="true" Dense="true">
                            @foreach (var o in FilterOperator.GetOperatorByDataType(atomicPredicate.MemberType))
                            {
                                <MudSelectItem Value="@o">@o</MudSelectItem>
                            }
                        </MudSelect>
                    </MudPaper>
                }

                @if (!string.IsNullOrWhiteSpace(atomicPredicate.Operator))
                {
                    FieldType fieldType = FieldType.Identify(atomicPredicate.MemberType);
                    if (fieldType.IsString && !(atomicPredicate.Operator ?? "").EndsWith("empty"))
                    {
                        <MudTextField Class="flex-shrink-1" T="string" @bind-Value="@atomicPredicate.ValueString" Required="true" />
                    }
                    else if (fieldType.IsNumber && !(atomicPredicate.Operator ?? "").EndsWith("empty"))
                    {
                        <MudPaper Class="flex-initial" Width="25%" Elevation="0">
                            <MudNumericField Class="flex-shrink-1" T="double?" @bind-Value="@atomicPredicate.ValueNumber" Required="true" />
                        </MudPaper>
                    }
                    else if (fieldType.IsEnum)
                    {
                        @if ((atomicPredicate.Operator ?? "").Equals("is one of") || (atomicPredicate.Operator ?? "").Equals("is not one of"))
                        {
                            <MudPaper Class="flex-initial" Width="25%" Elevation="0">
                                <MudSelect T="string" @bind-Value="@atomicPredicate.ValueString" @bind-SelectedValues="@atomicPredicate.MultiSelectValues" MultiSelection="true" FullWidth="true" Required="true" Dense="true">
                                    @foreach (var item in Enum.GetValues(fieldType.InnerType))
                                    {
                                        <MudSelectItem T="string" Value="@((string)@item.ToString())">@item</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudPaper>
                        }
                        else
                        {
                            <MudPaper Class="flex-initial" Width="25%" Elevation="0">
                                <MudSelect T="Enum" @bind-Value="@atomicPredicate.ValueEnum" MultiSelection="false" FullWidth="true" Required="true" Dense="true">
                                    @foreach (var item in Enum.GetValues(fieldType.InnerType))
                                    {
                                        <MudSelectItem T="Enum" Value="@((Enum)item)">@item</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudPaper>
                        }
                    }
                    else if (fieldType.IsBoolean)
                    {
                        <MudPaper Class="flex-initial" Width="25%" Elevation="0">
                            <MudSelect Class="flex-shrink-1" T="bool?" @bind-Value="@atomicPredicate.ValueBool" Required="true" Dense="true">
                                <MudSelectItem T="bool?" Value="@(true)">true</MudSelectItem>
                                <MudSelectItem T="bool?" Value="@(false)">false</MudSelectItem>
                            </MudSelect>
                        </MudPaper>
                    }
                    else if (fieldType.IsDateTime && !(atomicPredicate.Operator ?? "").EndsWith("empty"))
                    {
                        <MudPaper Class="flex-initial" Width="25%" Elevation="0">
                            <MudDatePicker Class="flex-shrink-1" @bind-Date="@atomicPredicate.ValueDate" Required="true" />
                            <MudTimePicker Class="flex-shrink-1" @bind-Time="@atomicPredicate.ValueTime" Required="true" />
                        </MudPaper>
                    }
                }

            </MudStack>
        </MudPaper>
    }
    else
    {
        <MudTextM3 TypeSize="TypeSize.Medium" TypeStyle="TypeStyle.Label">I am neither CompoundPredicate nor AtomicPredicate</MudTextM3>
    }
</div>




@code {

    [CascadingParameter] public MudFilter<T> Filter { get; set; }
    [Parameter, EditorRequired] public PredicateUnit<T> PredicateUnit { get; set; }

    protected string ClassName => new CssBuilder("mud-filter-node")
        .AddClass(Class)
        .Build();

    protected string StyleString => new StyleBuilder()
        .AddStyle(Style)
        .Build();

    protected void AddPropertyExpression()
    {
        ((CompoundPredicate<T>)PredicateUnit)?.FilterDescriptors.Add(new AtomicPredicate<T>());
    }

    protected void AddGroup()
    {
        ((CompoundPredicate<T>)PredicateUnit)?.FilterDescriptors.Add(new CompoundPredicate<T>());
    }

}